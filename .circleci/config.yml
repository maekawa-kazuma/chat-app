version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.5-node-browsers-legacy
        environment:
          # - BUNDLER_VERSION: 2.1.4
          - RAILS_ENV: 'test'
      - image: circleci/mysql:5.6
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
          - MYSQL_ROOT_HOST: '%'
          
    working_directory: ~/myapp

    steps:
      - checkout
      # キャッシュすることで、テスト等の時間を短縮している
      - restore_cache:
          keys:
            - myapp-bundle-v1-{{ checksum "Gemfile.lock" }}
            - myapp-bundle-v1-
            # - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            # - v1-dependencies-
      - run:
          name: Bundlerをinstall
          command: |
            gem update --system
            gem install bundler
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      # - run:
      #     name: install dependencies
      #     command: |
# ①bundler2.0.1以降のものを使っているのであれば、環境変数と合わせて指定する必要があります。
            # gem install bundler -v 2.0.2
            # bundle install --jobs=4 --retry=3 --path vendor/bundle
            # bundle install --jobs=4 --retry=3 --path vendor/bundle
      # - run:
      #     name: Bundle Install
      #     command: bundle check || bundle install

      - save_cache:
          paths:
            - ./vendor/bundle
          key: myapp-bundle-v1-{{ checksum "Gemfile.lock" }}
          # key: v1-dependencies-{{ checksum "Gemfile.lock" }}
      # - restore_cache:
      #     keys:
      #       - rails-demo-yarn-{{ checksum "yarn.lock" }}
      #       - rails-demo-yarn-

# database.ymlとdatabase.yml.ciを入れ替える。
      - run: mv config/database.yml.ci config/database.yml 

      # Database setup
      - run: bundle exec rails db:create
      #schema.rbをもとにSQLクエリを発行。ローカルでいうrails db:migrateのようなもの。
      - run: bundle exec rails db:schema:load

# rubocopを走らせる記述。
      - run:
          name: Rubocop
          command: bundle exec rubocop

# rspecを走らせる記述です。
      # run tests!
      - run:
          name: yarn Install
          command: yarn install
      - run:
          name: Rspec
          command: bundle exec rspec

          # command: |
          #   mkdir /tmp/test-results
          #   TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
          #     circleci tests split --split-by=timings)"


# ③ここでRspecJunitFormatterというgemをインストールしていないとエラーになります。gemfileに記述しましょう。
            # bundle exec rspec \
            #   --format progress \
            #   --format RspecJunitFormatter \
            #   --out /tmp/test-results/rspec.xml \
            #   --format progress \
            #   $TEST_FILES

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
